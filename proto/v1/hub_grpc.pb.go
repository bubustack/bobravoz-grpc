//
//Copyright 2025 BubuStack.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: v1/hub.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HubService_Process_FullMethodName = "/proto.v1.HubService/Process"
)

// HubServiceClient is the client API for HubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HubServiceClient interface {
	// Process is a bidirectional streaming RPC that allows the hub to process and forward data between engrams.
	Process(ctx context.Context, opts ...grpc.CallOption) (HubService_ProcessClient, error)
}

type hubServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHubServiceClient(cc grpc.ClientConnInterface) HubServiceClient {
	return &hubServiceClient{cc}
}

func (c *hubServiceClient) Process(ctx context.Context, opts ...grpc.CallOption) (HubService_ProcessClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &HubService_ServiceDesc.Streams[0], HubService_Process_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &hubServiceProcessClient{ClientStream: stream}
	return x, nil
}

type HubService_ProcessClient interface {
	Send(*ProcessRequest) error
	Recv() (*ProcessResponse, error)
	grpc.ClientStream
}

type hubServiceProcessClient struct {
	grpc.ClientStream
}

func (x *hubServiceProcessClient) Send(m *ProcessRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hubServiceProcessClient) Recv() (*ProcessResponse, error) {
	m := new(ProcessResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubServiceServer is the server API for HubService service.
// All implementations must embed UnimplementedHubServiceServer
// for forward compatibility
type HubServiceServer interface {
	// Process is a bidirectional streaming RPC that allows the hub to process and forward data between engrams.
	Process(HubService_ProcessServer) error
	mustEmbedUnimplementedHubServiceServer()
}

// UnimplementedHubServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHubServiceServer struct {
}

func (UnimplementedHubServiceServer) Process(HubService_ProcessServer) error {
	return status.Errorf(codes.Unimplemented, "method Process not implemented")
}
func (UnimplementedHubServiceServer) mustEmbedUnimplementedHubServiceServer() {}

// UnsafeHubServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HubServiceServer will
// result in compilation errors.
type UnsafeHubServiceServer interface {
	mustEmbedUnimplementedHubServiceServer()
}

func RegisterHubServiceServer(s grpc.ServiceRegistrar, srv HubServiceServer) {
	s.RegisterService(&HubService_ServiceDesc, srv)
}

func _HubService_Process_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HubServiceServer).Process(&hubServiceProcessServer{ServerStream: stream})
}

type HubService_ProcessServer interface {
	Send(*ProcessResponse) error
	Recv() (*ProcessRequest, error)
	grpc.ServerStream
}

type hubServiceProcessServer struct {
	grpc.ServerStream
}

func (x *hubServiceProcessServer) Send(m *ProcessResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hubServiceProcessServer) Recv() (*ProcessRequest, error) {
	m := new(ProcessRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HubService_ServiceDesc is the grpc.ServiceDesc for HubService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HubService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.HubService",
	HandlerType: (*HubServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Process",
			Handler:       _HubService_Process_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v1/hub.proto",
}
